void CMAES::reflect(vec& highest, vec& centroid, vec& reflected){
  reflected = 2*centroid - highest;
}

void CMAES::expand(vec& highest, vec& centroid, vec& expanded){
  expanded = 3*centroid - 2*highest;
}

void CMAES::contract(vec& highest, vec& centroid, vec& contracted){
  contracted = 0.5*centroid + 0.5*highest;
}

void CMAES::reduce(mat& simplex, size_t low){
  for (size_t i = 0; i < simplex.n_rows; i++) {
    if (i != low) {
      for (size_t j = 0; j < simplex.n_cols; j++) {
        simplex(i,j) = simplex(i,j)/2.0 + simplex(low,j)/2.0;
      }
    }
  }
}

void CMAES::SimplexUpdate(mat& simplex, vec& fval, size_t& high, size_t& low, vec& centroid){
  high = 0;
  low = 0;
  double highest = fval(0);
  double lowest = fval(0);

  for (size_t i = 0; i < simplex.n_rows; i++) {
    double next = fval(i);

    if (next > highest) {
      highest = next;
      high = i;
    }
    if (next < lowest) {
      lowest = next;
      low = i;
    }
  }

  for (size_t i = 0; i < simplex.n_cols; i++) {
    double s = 0;
    for (size_t j = 0; j < simplex.n_rows; j++) {
      if ( j != high) {
        s += simplex(j,i);
      }
    }
    centroid(i) = s/simplex.n_cols;
  }
}

void CMAES::SimplexInit(std::function<double(vec&)> f, mat& simplex, vec& fval, size_t& high, size_t& low, vec& centroid){
  for (size_t i = 0; i < simplex.n_rows; i++) {
    vec x = simplex.row(i).t();
    fval(i) = f(x);
  }
  SimplexUpdate(simplex,fval,high,low,centroid);
}

size_t CMAES::DownhillSimplex(std::function<double(vec&)> fitness, mat& simplex, double goalSize, vec& result){
  size_t high, low, steps = 0, n = simplex.n_cols;
  vec centroid(n), fval(n+1), p1(n), p2(n), highvec(n);

  SimplexInit(fitness,simplex,fval,high,low,centroid);

  while (dimSize(simplex,n) > goalSize) {
    SimplexUpdate(simplex,fval,high,low,centroid);
    highvec = simplex.row(high).t();
    reflect(highvec,centroid,p1);
    double f_re = fitness(p1);
    if (f_re < fval(low)) {
      highvec = simplex.row(high).t();
      expand(highvec,centroid,p2);
      double f_ex = fitness(p2);
      if (f_ex < f_re) {
        for (size_t i = 0; i < n; i++) {
          simplex(high,i) = p2(i);
          fval(high) = f_ex;
        }
      }
      else{
        for (size_t i = 0; i < n; i++) {
          simplex(high,i) = p1(i);
          fval(high) = f_re;
        }
      }
    }
    else{
      if (f_re < fval(high)) {
        for (size_t i = 0; i < n; i++) {
          simplex(high,i) = p1(i);
          fval(high) = f_re;
        }
      }
      else{
        highvec = simplex.row(high).t();
        contract(highvec,centroid,p1);
        double f_co = fitness(p1);
        if (f_co < fval(high)) {
          for (size_t i = 0; i < n; i++) {
            simplex(high,i) = p1(i);
            fval(high) = f_co;
          }
        }
        else{
          reduce(simplex,low);
          SimplexInit(fitness,simplex,fval,high,low,centroid);
        }
      }
    }
    steps++;
  }
  result = simplex.row(low).t();
  return steps;
}

double CMAES::dimSize(mat& simplex, size_t dim){
  double s = 0;
  for (size_t i = 1; i < dim+1; i++) {
    double d = 0;
    for (size_t k = 0; k < dim; k++) {
      d += pow(simplex(i,k) - simplex(0,k),2);
    }
    d = sqrt(d);
    if (d>s) s = d;
  }
  return s;
}
